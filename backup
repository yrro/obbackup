#!/usr/bin/python

from __future__ import division
from __future__ import with_statement

import ConfigParser
import os
import re
import socket
import subprocess
import sys
import time
import traceback
import urlparse

def call (*args, **kwargs):
    print '>', ' '.join (args)
    sys.stdout.flush (); sys.stderr.flush ()

    stdin = kwargs.pop ('stdin', None)
    if stdin is not None:
        kwargs['stdin'] = subprocess.PIPE
    kwargs['close_fds'] = True

    p = subprocess.Popen (args, **kwargs)
    so, se = p.communicate (stdin)
    if p.returncode != 0:
        raise Exception ('%s failed (status %i)' % (args[0], p.returncode))
    return so

class mount (object):
    def __init__ (self, target, device = None, options = {}):
        self.device = device
        self.options = options
        self.target = target

    def check_mounted (self, desired):
        if os.path.ismount (self.target) != desired:
            raise Exception ('"%s" %s mounted, but it %s be' % (self.target, 'is not' if desired else 'is', 'should' if desired else 'should not'))

    def __enter__ (self):
        if self.target:
            self.check_mounted (False)

        args = ['mount']
        if len (self.options) > 0:
            args.append ('-o')
            args.append (','.join ([k + ('=' + v if v else '') for k, v in self.options.items()]))
        if self.device:
            args.append (self.device)
        args.append (self.target)

        call (*args)

        self.check_mounted (True)
        return self

    def df (self):
        self.check_mounted (True)

        s = os.statvfs (self.target)
        size = s.f_frsize * s.f_blocks
        used = size - s.f_frsize * s.f_bfree
        return used, size

    def __exit__ (self, exc_type, exc_val, exc_tb):
        self.check_mounted (True)
        call ('umount', self.target)
        self.check_mounted (False)
        return False

class dummy_mount (object):
    def __init__ (self, directory):
        self.directory = directory
    def __enter__ (self):
        return self
    def __exit__ (self, exc_type, exc_val, exc_tb):
        return False
    def df (self):
        s = os.statvfs (self.directory)
        size = s.f_frsize * s.f_blocks
        used = size - s.f_frsize * s.f_bfree
        return used, size

class ftp_mount (object):
    def __init__ (self, uri):
        self.sr = urlparse.urlsplit (uri)
    def __enter__ (self):
        return self
    def __exit__ (self, exc_type, exc_val, exc_tb):
        return False
    def df (self):
        size = config.getint ('target', 'quota')
        output = call ('lftp', stdin='connect %s && user %s %s && du --bytes --summarize .' % (self.sr.hostname, self.sr.username, os.environ['FTP_PASSWORD']), stdout=subprocess.PIPE)
        used = int (output.split ()[0])
        return used, size

class snapshot (object):
    def __init__ (self, lv):
        self.lv = lv
        self.lv_snap = '%s_backup' % (lv)
        self.device = os.path.join ('/dev', self.lv_snap)

    def __enter__ (self):
        time.sleep (1) # might eliminate weird warnings from lvcreate about devices not existing?
        call ('lvcreate', '--quiet', '--size=1G', '--snapshot', '--name=%s' % (self.lv_snap), self.lv)

        return self

    def __exit__ (self, exc_type, exc_val, exc_tv):
        call ('lvremove', '--quiet', '--force', self.lv_snap)

        return False

def backup_dir (name, dir):
    if backup_type.startswith ('obnam_'):
        args = ['obnam']

        repostr = config.get ('target', 'uri')
        repourl = urlparse.urlsplit (repostr)
        if repourl.scheme == 'file':
            repostr = os.path.join (repourl.path, name)
        else:
            if repostr.path[-1] != '/': repostr += '/'
            repostr += name
        del repourl
        args.append ('--repository={0}'.format (repostr))

        if config.has_option ('target', 'encrypt_with'):
            args.append ('--encrypt-with={0}'.format (config.get ('target', 'encrypt_with')))

        if backup_type == 'obnam_backup':
            backup_args = list (args)
            backup_args.extend (['backup', '--one-file-system', dir])
            forget_args = list (args)
            forget_args.extend (['forget', '--keep={0}'.format (config.get ('target', 'keep'))])
            try:
                call (*backup_args)
            except:
                raise
            else:
                call (*forget_args)
        elif backup_type == 'obnam_cleanup':
            args.extend (['force-lock'])
            call (*args)

    else:
        args = ['duplicity']

        if backup_type == 'auto':
            args.extend (['--full-if-older-than', '1W', '--exclude-other-filesystems', dir])
        elif backup_type in ['full', 'incremental']:
            args.extend ([backup_type, '--exclude-other-filesystems', dir])
        elif backup_type == 'dummy':
            args.insert (0, 'true')
        elif backup_type == 'cleanup':
            args.extend (['cleanup', '--force', '--extra-clean'])
        elif backup_type == 'expire':
            args.extend (['remove-all-but-n-full', config.get ('target', 'full_count'), '--force'])

        uri = config.get ('target', 'uri')
        if uri[-1] != '/': uri += '/'
        url = urlparse.urljoin (uri, name)
        args.append (url)
        try:
            call (*args)
        except:
            call ('duplicity', 'cleanup', url)
            raise

def backup_lv (name, lv):
    with snapshot (lv) as s:
        with mount (config.get ('lvm', 'snapshot_mnt'), s.device, {'ro': None}):
            backup_dir (name, config.get ('lvm', 'snapshot_mnt'))

backup_functions = {
    'lv': backup_lv,
    'dir': backup_dir
}

def print_line (msg):
    print '_____ %s %s' % (msg, '_' * (67 - len (msg) - 1))

if __name__ == '__main__':
    backup_types = ['auto', 'full', 'incremental', 'dummy', 'cleanup', 'expire', 'obnam_backup', 'obnam_cleanup']
    if (len (sys.argv) != 3):
        print >> sys.stderr, "Usage: %s CONFIGFILE %s" % (sys.argv[0], '|'.join (backup_types))
        sys.exit (1)

    config = ConfigParser.SafeConfigParser ({'hostname': socket.gethostname ()})
    config.optionxform = str
    config.read (sys.argv[1])

    # duplicity reads this from the environment
    if config.has_section ('environment'):
        for name, value in config.items ('environment'):
            os.environ[name] = value

    # full or incremental?
    backup_type = sys.argv[2]
    if sys.argv[2] not in backup_types:
        print 'Invalid backup type "%s"; aborting.' % (sys.argv[2])
        sys.exit (1)

    if config.has_option ('target', 'mount'):
        mounter = mount (config.get ('target', 'mount'))
    elif config.has_option ('target', 'dir'):
        mounter = dummy_mount (config.get ('target', 'dir'))
    elif config.has_option ('target', 'uri'):
        mounter = ftp_mount (config.get ('target', 'uri'))
    else:
        print 'Missing mount/uri/dir in [target] section'
        sys.exit (1)

    errors = 0

    with mounter:
        job_re = re.compile ('^job:(?P<name>\w+)$')
        for section in config.sections ():
            m = job_re.match (section)
            if not m: continue

            name = m.group ('name')
            print; print_line ("%s start" % (name))

            try:
                type = config.get (section, 'type')
                what = config.get (section, 'what')
                if type not in backup_functions:
                    raise Exception ('Unknown job type "%s"' % (type))
                backup_functions[type] (name, what)
            except:
                errors += 1
                print traceback.format_exc ()
            print_line ("%s end" % (name))

        # report
        print
        print 'Process complete.'

        if errors > 0:
            print '%i job%s failed.' % (errors, errors != 1 and 's' or '')

        try:
            used, size = mounter.df ()
            print 'Used %d of %g bytes (%.0f%%).' % (used, size, used/size*100)
        except:
            print 'Unable to calculate used/remaining space:'
            print traceback.format_exc ()
            print

    sys.exit (0 if errors == 0 else 1)

# vim: ts=4 sts=4 sw=4 et
